// nolint: testpackage
package domain

import (
	"bytes"
	"errors"
	"strings"
	"testing"
	"time"

	"github.com/google/go-cmp/cmp"
	"github.com/kunitsuinc/ccc/pkg/constz"
	"github.com/kunitsuinc/util.go/testz"
	"gonum.org/v1/plot"
	"gonum.org/v1/plot/plotter"
)

// nolint: paralleltest
func TestPlotGraph(t *testing.T) {
	t.Run("success", func(t *testing.T) {
		const expect = `<?xml version="1.0"?>
<!-- Generated by SVGo and Plotinum VG -->
<svg width="960pt" height="540pt" viewBox="0 0 960 540"
	xmlns="http://www.w3.org/2000/svg"
	xmlns:xlink="http://www.w3.org/1999/xlink">
<g transform="scale(1, -1) translate(0, -540)">
<path d="M0,0L960,0L960,540L0,540Z" style="fill:#FFFFFF" />
<text x="462" y="-532.02" transform="scale(1, -1)"
	style="font-family:Liberation Mono;font-variant:normal;font-weight:normal;font-style:normal;font-size:12px">Title</text>
<text x="498.72" y="-5.6133" transform="scale(1, -1)"
	style="font-family:Liberation Mono;font-variant:normal;font-weight:normal;font-style:normal;font-size:12px">XLabel</text>
<text x="490.32" y="-18.271" transform="scale(1, -1)"
	style="font-family:Liberation Mono;font-variant:normal;font-weight:normal;font-style:normal;font-size:10px">2022-02-02</text>
<g transform="rotate(90)">
<text x="258.36" y="7.9805" transform="scale(1, -1)"
	style="font-family:Liberation Mono;font-variant:normal;font-weight:normal;font-style:normal;font-size:12px">YLabel</text>
</g>
<text x="29.199" y="-32.539" transform="scale(1, -1)"
	style="font-family:Liberation Mono;font-variant:normal;font-weight:normal;font-style:normal;font-size:10px">0</text>
<text x="17.197" y="-256.07" transform="scale(1, -1)"
	style="font-family:Liberation Mono;font-variant:normal;font-weight:normal;font-style:normal;font-size:10px">100</text>
<text x="17.197" y="-479.6" transform="scale(1, -1)"
	style="font-family:Liberation Mono;font-variant:normal;font-weight:normal;font-style:normal;font-size:10px">200</text>
<path d="M41.201,33.525L49.201,33.525" style="fill:none;stroke:#000000;stroke-width:0.5" />
<path d="M41.201,257.05L49.201,257.05" style="fill:none;stroke:#000000;stroke-width:0.5" />
<path d="M41.201,480.58L49.201,480.58" style="fill:none;stroke:#000000;stroke-width:0.5" />
<path d="M45.201,78.231L49.201,78.231" style="fill:none;stroke:#000000;stroke-width:0.5" />
<path d="M45.201,122.94L49.201,122.94" style="fill:none;stroke:#000000;stroke-width:0.5" />
<path d="M45.201,167.64L49.201,167.64" style="fill:none;stroke:#000000;stroke-width:0.5" />
<path d="M45.201,212.35L49.201,212.35" style="fill:none;stroke:#000000;stroke-width:0.5" />
<path d="M45.201,301.76L49.201,301.76" style="fill:none;stroke:#000000;stroke-width:0.5" />
<path d="M45.201,346.47L49.201,346.47" style="fill:none;stroke:#000000;stroke-width:0.5" />
<path d="M45.201,391.17L49.201,391.17" style="fill:none;stroke:#000000;stroke-width:0.5" />
<path d="M45.201,435.88L49.201,435.88" style="fill:none;stroke:#000000;stroke-width:0.5" />
<path d="M45.201,525.29L49.201,525.29" style="fill:none;stroke:#000000;stroke-width:0.5" />
<path d="M49.201,33.525L49.201,526.41" style="fill:none;stroke:#000000;stroke-width:0.5" />
<path d="M90.328,33.525L90.328,35.761L950.33,35.761L950.33,33.525Z" style="fill:#FFCABF" />
<path d="M90.328,35.761L90.328,40.231L950.33,40.231L950.33,35.761Z" style="fill:#FFFF80" />
<path d="M520.33,33.525L520.33,526.41" style="fill:none;stroke:#808080;stroke-width:0.25" />
<path d="M80.656,33.525L960,33.525" style="fill:none;stroke:#000000;stroke-width:0.25;stroke-dasharray:5" />
<path d="M80.656,257.05L960,257.05" style="fill:none;stroke:#000000;stroke-width:0.25;stroke-dasharray:5" />
<path d="M80.656,480.58L960,480.58" style="fill:none;stroke:#000000;stroke-width:0.25;stroke-dasharray:5" />
<path d="M90.656,502.81L90.656,512.8L110.66,512.8L110.66,502.81Z" style="fill:#FFCABF" />
<text x="117.86" y="-506.62" transform="scale(1, -1)"
	style="font-family:Liberation Mono;font-variant:normal;font-weight:normal;font-style:normal;font-size:12px">legend1</text>
<path d="M90.656,492.82L90.656,502.81L110.66,502.81L110.66,492.82Z" style="fill:#FFFF80" />
<text x="117.86" y="-496.63" transform="scale(1, -1)"
	style="font-family:Liberation Mono;font-variant:normal;font-weight:normal;font-style:normal;font-size:12px">legend2</text>
</g>
</svg>
`
		buf := bytes.NewBuffer(nil)
		from := time.Date(2022, 2, 2, 2, 22, 22, 0, constz.TimeZone("Asia/Tokyo"))
		d := New(WithTicker(plot.DefaultTicks{}))
		if err := d.PlotGraph(buf, &PlotGraphParameters{
			GraphTitle:       "Title",
			XLabelText:       "XLabel",
			YLabelText:       "YLabel",
			Width:            1280,
			Hight:            720,
			XAxisPointsCount: 1,
			From:             from,
			To:               from.AddDate(0, 0, 1),
			TimeZone:         constz.TimeZone("Asia/Tokyo"),
			OrderedLegends:   []string{"legend1", "legend2"},
			LegendValuesMap: map[string]plotter.Values{
				"legend1": []float64{1},
				"legend2": []float64{2},
			},
			ImageFormat: "svg",
		}); err != nil {
			t.Errorf("err != nil: %v", err)
		}
		actual := buf.String()
		if expect != actual {
			t.Errorf("expect != actual:\n%s", cmp.Diff(expect, actual))
			t.Errorf("actual:\n%s", actual)
		}
	})

	t.Run("failure(NoData)", func(t *testing.T) {
		buf := bytes.NewBuffer(nil)
		from := time.Date(2022, 2, 2, 2, 22, 22, 0, constz.TimeZone("Asia/Tokyo"))
		d := New()
		if err := d.PlotGraph(buf, &PlotGraphParameters{
			GraphTitle:       "Title",
			XLabelText:       "XLabel",
			YLabelText:       "YLabel",
			Width:            1280,
			Hight:            720,
			XAxisPointsCount: 1,
			From:             from,
			To:               from.AddDate(0, 0, 1),
			TimeZone:         constz.TimeZone("Asia/Tokyo"),
			OrderedLegends:   []string{"NoData"},
			LegendValuesMap: map[string]plotter.Values{
				"legend1": []float64{1},
			},
			ImageFormat: "svg",
		}); !errors.Is(err, plotter.ErrNoData) {
			t.Errorf("err != plotter.ErrNoData: %v", err)
		}
	})

	t.Run("failure(InvalidImageFormat)", func(t *testing.T) {
		buf := bytes.NewBuffer(nil)
		from := time.Date(2022, 2, 2, 2, 22, 22, 0, constz.TimeZone("Asia/Tokyo"))
		d := New()
		if err := d.PlotGraph(buf, &PlotGraphParameters{
			GraphTitle:       "Title",
			XLabelText:       "XLabel",
			YLabelText:       "YLabel",
			Width:            1280,
			Hight:            720,
			XAxisPointsCount: 1,
			From:             from,
			To:               from.AddDate(0, 0, 1),
			TimeZone:         constz.TimeZone("Asia/Tokyo"),
			OrderedLegends:   []string{"legend1", "legend2"},
			LegendValuesMap: map[string]plotter.Values{
				"legend1": []float64{1},
				"legend2": []float64{2},
			},
			ImageFormat: "InvalidImageFormat",
		}); err != nil && !strings.Contains(err.Error(), "unsupported format: ") {
			t.Errorf("err != unsupported format: %v", err)
		}
	})

	t.Run("failure(InvalidImageFormat)", func(t *testing.T) {
		rw := testz.NewReadWriter(0, testz.ErrTestError)
		from := time.Date(2022, 2, 2, 2, 22, 22, 0, constz.TimeZone("Asia/Tokyo"))
		d := New()
		err := d.PlotGraph(rw, &PlotGraphParameters{
			GraphTitle:       "Title",
			XLabelText:       "XLabel",
			YLabelText:       "YLabel",
			Width:            1280,
			Hight:            720,
			XAxisPointsCount: 1,
			From:             from,
			To:               from.AddDate(0, 0, 1),
			TimeZone:         constz.TimeZone("Asia/Tokyo"),
			OrderedLegends:   []string{"legend1", "legend2"},
			LegendValuesMap: map[string]plotter.Values{
				"legend1": []float64{1},
				"legend2": []float64{2},
			},
			ImageFormat: "svg",
		})
		if err == nil || err != nil && !strings.Contains(err.Error(), "(io.WriterTo).WriteTo") {
			t.Errorf("err not contain (io.WriterTo).WriteTo: %v", err)
		}
	})
}
